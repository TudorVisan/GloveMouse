
GloveMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007d4  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000214  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000056c  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f4  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019a  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000036c  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ea       	ldi	r30, 0xA6	; 166
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 30       	cpi	r26, 0x00	; 0
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  e2:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <initUSART>:
} mouseReport;


//initialize USART
void initUSART() {
    UBRR1 = 8;								//baud rate 115.2k
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 cd 00 	sts	0x00CD, r25
  f2:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = 0;
  f6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = (1<<TXEN1);					//enable transmitter
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);		//8-bit character size
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 ca 00 	sts	0x00CA, r24
}
 106:	08 95       	ret

00000108 <initPins>:

//initialize pins
void initPins() {
	BUTTON_SENS_PORT &= ~(1<<BUTTONS_SENS_PIN);	//set sensitivity select button as input
 108:	2c 98       	cbi	0x05, 4	; 5
	LED_PORT |= (1<<LED_1_PIN) | (1<<LED_2_PIN);	//set led pins as output
 10a:	81 b3       	in	r24, 0x11	; 17
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	81 bb       	out	0x11, r24	; 17
}
 110:	08 95       	ret

00000112 <initADC>:

//initialize ADC
void initADC() {
	ADMUX = (1<<REFS0) | (1<<ADLAR);							//set AVCC as reference; left-adjust the result
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);	//enable ADC; set prescaler to 128
 118:	87 e8       	ldi	r24, 0x87	; 135
 11a:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC6D) | (1<<ADC7D);							//disable digital input buffers to reduce noise
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	80 93 7e 00 	sts	0x007E, r24
	DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC10D);
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	80 93 7d 00 	sts	0x007D, r24
}
 12a:	08 95       	ret

0000012c <read>:

//make ADC conversion on channel channel
uint8_t read(uint8_t channel) {
	//erase previous channel
	ADMUX &= ~((1<<MUX4) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	90 81       	ld	r25, Z
 132:	90 7e       	andi	r25, 0xE0	; 224
 134:	90 83       	st	Z, r25
	ADCSRB &= ~(1<<MUX5);	
 136:	eb e7       	ldi	r30, 0x7B	; 123
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	9f 7d       	andi	r25, 0xDF	; 223
 13e:	90 83       	st	Z, r25
	
	//set conversion channel
	if(channel <= 7) {
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	30 f4       	brcc	.+12     	; 0x150 <read+0x24>
		ADMUX |= channel;					
 144:	ec e7       	ldi	r30, 0x7C	; 124
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	0b c0       	rjmp	.+22     	; 0x166 <read+0x3a>
	} else {
		ADMUX |= channel - 8;
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	88 50       	subi	r24, 0x08	; 8
 158:	89 2b       	or	r24, r25
 15a:	80 83       	st	Z, r24
		ADCSRB |= (1<<MUX5);
 15c:	eb e7       	ldi	r30, 0x7B	; 123
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 62       	ori	r24, 0x20	; 32
 164:	80 83       	st	Z, r24
	}
			
	ADCSRA |= (1<<ADSC);				//start conversion
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));		//wait for conversion to finish
 170:	80 81       	ld	r24, Z
 172:	84 ff       	sbrs	r24, 4
 174:	fd cf       	rjmp	.-6      	; 0x170 <read+0x44>
	return ADCH;						//return the result
 176:	80 91 79 00 	lds	r24, 0x0079
}
 17a:	08 95       	ret

0000017c <mediate>:

//mediate 16 ADC conversions on channel channel
uint8_t mediate(uint8_t channel) {
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	f8 2e       	mov	r15, r24
 188:	00 e1       	ldi	r16, 0x10	; 16
 18a:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t sum = 0, i;				
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<16; ++i) {	
		sum += read(channel);			
 190:	8f 2d       	mov	r24, r15
 192:	0e 94 96 00 	call	0x12c	; 0x12c <read>
 196:	c8 0f       	add	r28, r24
 198:	d1 1d       	adc	r29, r1
 19a:	01 50       	subi	r16, 0x01	; 1
 19c:	10 40       	sbci	r17, 0x00	; 0
}

//mediate 16 ADC conversions on channel channel
uint8_t mediate(uint8_t channel) {
	uint16_t sum = 0, i;				
	for(i=0; i<16; ++i) {	
 19e:	c1 f7       	brne	.-16     	; 0x190 <mediate+0x14>
		sum += read(channel);			
	}
	return (uint8_t)(sum>>4);			
 1a0:	ce 01       	movw	r24, r28
 1a2:	92 95       	swap	r25
 1a4:	82 95       	swap	r24
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	89 27       	eor	r24, r25
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	89 27       	eor	r24, r25
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	08 95       	ret

000001ba <write>:

//transmits a mouseReport to the computer
void write(mouseReport report) {
	//send start sequence
	while (!(UCSR1A & (1<<UDRE1)));		
 1ba:	e8 ec       	ldi	r30, 0xC8	; 200
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	20 81       	ld	r18, Z
 1c0:	25 ff       	sbrs	r18, 5
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <write+0x4>
	UDR1 = 'T';							
 1c4:	24 e5       	ldi	r18, 0x54	; 84
 1c6:	20 93 ce 00 	sts	0x00CE, r18
	while (!(UCSR1A & (1<<UDRE1)));
 1ca:	e8 ec       	ldi	r30, 0xC8	; 200
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	20 81       	ld	r18, Z
 1d0:	25 ff       	sbrs	r18, 5
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <write+0x14>
	UDR1 = 'V';
 1d4:	26 e5       	ldi	r18, 0x56	; 86
 1d6:	20 93 ce 00 	sts	0x00CE, r18
	
	//send the actual report
	while (!(UCSR1A & (1<<UDRE1)));		
 1da:	e8 ec       	ldi	r30, 0xC8	; 200
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	20 81       	ld	r18, Z
 1e0:	25 ff       	sbrs	r18, 5
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <write+0x24>
	UDR1 = report.buttons;
 1e4:	60 93 ce 00 	sts	0x00CE, r22
	while (!(UCSR1A & (1<<UDRE1)));		
 1e8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	20 81       	ld	r18, Z
 1ee:	25 ff       	sbrs	r18, 5
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <write+0x32>
	UDR1 = report.x;
 1f2:	70 93 ce 00 	sts	0x00CE, r23
	while (!(UCSR1A & (1<<UDRE1)));
 1f6:	e8 ec       	ldi	r30, 0xC8	; 200
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	20 81       	ld	r18, Z
 1fc:	25 ff       	sbrs	r18, 5
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <write+0x40>
	UDR1 = report.y;
 200:	80 93 ce 00 	sts	0x00CE, r24
	while (!(UCSR1A & (1<<UDRE1)));
 204:	e8 ec       	ldi	r30, 0xC8	; 200
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	85 ff       	sbrs	r24, 5
 20c:	fd cf       	rjmp	.-6      	; 0x208 <write+0x4e>
	UDR1 = report.wheel;
 20e:	90 93 ce 00 	sts	0x00CE, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	9e e4       	ldi	r25, 0x4E	; 78
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <write+0x5c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <write+0x62>
 21c:	00 00       	nop
	
	//delay because driver is shit
	_delay_ms(5);
}
 21e:	08 95       	ret

00000220 <test>:

//test function; moves the cursor in a square pattern
void test() {
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	int ind;
	mouseReport nullReport = { 0, 0, 0, 0 };		//an empty report
 234:	cc 24       	eor	r12, r12
 236:	dd 24       	eor	r13, r13
 238:	76 01       	movw	r14, r12
	mouseReport report = { 0, 0, 0, 0};								
 23a:	88 24       	eor	r8, r8
 23c:	99 24       	eor	r9, r9
 23e:	54 01       	movw	r10, r8
	
	report.x = -2;									
 240:	0f 2e       	mov	r0, r31
 242:	fe ef       	ldi	r31, 0xFE	; 254
 244:	9f 2e       	mov	r9, r31
 246:	f0 2d       	mov	r31, r0
 248:	c4 e1       	ldi	r28, 0x14	; 20
 24a:	d0 e0       	ldi	r29, 0x00	; 0
	for (ind=0; ind<20; ind++) {
		write(report);
 24c:	c5 01       	movw	r24, r10
 24e:	b4 01       	movw	r22, r8
 250:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
		write(nullReport);
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
 25c:	21 97       	sbiw	r28, 0x01	; 1
	int ind;
	mouseReport nullReport = { 0, 0, 0, 0 };		//an empty report
	mouseReport report = { 0, 0, 0, 0};								
	
	report.x = -2;									
	for (ind=0; ind<20; ind++) {
 25e:	b1 f7       	brne	.-20     	; 0x24c <test+0x2c>
		write(report);
		write(nullReport);
	}

	report.x = 0;	
 260:	99 24       	eor	r9, r9
	report.y = -2;									
 262:	0f 2e       	mov	r0, r31
 264:	fe ef       	ldi	r31, 0xFE	; 254
 266:	af 2e       	mov	r10, r31
 268:	f0 2d       	mov	r31, r0
 26a:	c4 e1       	ldi	r28, 0x14	; 20
 26c:	d0 e0       	ldi	r29, 0x00	; 0
	for (ind=0; ind<20; ind++) {
		write(report);
 26e:	c5 01       	movw	r24, r10
 270:	b4 01       	movw	r22, r8
 272:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
		write(nullReport);
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
 27e:	21 97       	sbiw	r28, 0x01	; 1
		write(nullReport);
	}

	report.x = 0;	
	report.y = -2;									
	for (ind=0; ind<20; ind++) {
 280:	b1 f7       	brne	.-20     	; 0x26e <test+0x4e>
		write(report);
		write(nullReport);
	}

	report.x = 2;									
 282:	99 24       	eor	r9, r9
 284:	68 94       	set
 286:	91 f8       	bld	r9, 1
	report.y = 0;				
 288:	aa 24       	eor	r10, r10
 28a:	c4 e1       	ldi	r28, 0x14	; 20
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	for (ind=0; ind<20; ind++) {
		write(report);
 28e:	c5 01       	movw	r24, r10
 290:	b4 01       	movw	r22, r8
 292:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
		write(nullReport);
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
 29e:	21 97       	sbiw	r28, 0x01	; 1
		write(nullReport);
	}

	report.x = 2;									
	report.y = 0;				
	for (ind=0; ind<20; ind++) {
 2a0:	b1 f7       	brne	.-20     	; 0x28e <test+0x6e>
		write(report);
		write(nullReport);
	}

	report.x = 0;
 2a2:	99 24       	eor	r9, r9
	report.y = 2;									
 2a4:	aa 24       	eor	r10, r10
 2a6:	68 94       	set
 2a8:	a1 f8       	bld	r10, 1
 2aa:	c4 e1       	ldi	r28, 0x14	; 20
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
	for (ind=0; ind<20; ind++) {
		write(report);
 2ae:	c5 01       	movw	r24, r10
 2b0:	b4 01       	movw	r22, r8
 2b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
		write(nullReport);
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
 2be:	21 97       	sbiw	r28, 0x01	; 1
		write(nullReport);
	}

	report.x = 0;
	report.y = 2;									
	for (ind=0; ind<20; ind++) {
 2c0:	b1 f7       	brne	.-20     	; 0x2ae <test+0x8e>
		write(report);
		write(nullReport);
	}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	08 95       	ret

000002d8 <main>:

//main function for GloveMouse application
int main() {
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	2a 97       	sbiw	r28, 0x0a	; 10
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	mouseReport nullReport = { 0, 0, 0, 0 };		//an empty report
 2ec:	88 24       	eor	r8, r8
 2ee:	99 24       	eor	r9, r9
 2f0:	54 01       	movw	r10, r8
	uint8_t buttonLeft, buttonRight, buttonPause;	//the three touch buttons
	uint8_t pauseFlag = 0, buttonFlag = 0;			//status indicators
	uint8_t threshold = 100;						//button press threshold
	
	//initialization sequence
	initUSART();
 2f2:	0e 94 75 00 	call	0xea	; 0xea <initUSART>
	initADC();
 2f6:	0e 94 89 00 	call	0x112	; 0x112 <initADC>
	initPins();
 2fa:	0e 94 84 00 	call	0x108	; 0x108 <initPins>
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	93 ed       	ldi	r25, 0xD3	; 211
 302:	a0 e3       	ldi	r26, 0x30	; 48
 304:	81 50       	subi	r24, 0x01	; 1
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	a0 40       	sbci	r26, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x2c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x36>
 30e:	00 00       	nop
	
	//delay to keep thing steady
	_delay_ms(1000);
	
	//calculate speed references
	Xv0 = mediate(CHANNEL_X);							
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	0e 94 be 00 	call	0x17c	; 0x17c <mediate>
 316:	08 2f       	mov	r16, r24
	Yv0 = mediate(CHANNEL_Y);
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	0e 94 be 00 	call	0x17c	; 0x17c <mediate>
 31e:	28 2e       	mov	r2, r24
	Xv = Xv0; Yv = Yv0; 
	
	//do a test just to be sure
	test();	
 320:	0e 94 10 01 	call	0x220	; 0x220 <test>
		//noise threshold is +/- 2
		//acceleration function is f(x) = (3/2 * abs(x) + 37) / 80 ... yeah, you heard me.  
		
		//gyro X axis
		Xv = read(CHANNEL_X);
		report.x = ((Xv < Xv0 - 2) || (Xv > Xv0 + 2))? (Xv0 - Xv) * (3*abs(Xv - Xv0)/2 + 37) / 80 : 0;	
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	d8 01       	movw	r26, r16
 328:	12 97       	sbiw	r26, 0x02	; 2
 32a:	ba 83       	std	Y+2, r27	; 0x02
 32c:	a9 83       	std	Y+1, r26	; 0x01
 32e:	0f 2e       	mov	r0, r31
 330:	f0 e5       	ldi	r31, 0x50	; 80
 332:	6f 2e       	mov	r6, r31
 334:	77 24       	eor	r7, r7
 336:	f0 2d       	mov	r31, r0
 338:	f8 01       	movw	r30, r16
 33a:	32 96       	adiw	r30, 0x02	; 2
 33c:	fe 83       	std	Y+6, r31	; 0x06
 33e:	ed 83       	std	Y+5, r30	; 0x05
		
		//gyro Y axis
		Yv = read(CHANNEL_Y);
		report.y = ((Yv < Yv0 - 2) || (Yv > Yv0 + 2))? (Yv0 - Yv) * (3*abs(Yv0 - Yv)/2 + 37) / 80 : 0;
 340:	33 24       	eor	r3, r3
 342:	91 01       	movw	r18, r2
 344:	22 50       	subi	r18, 0x02	; 2
 346:	30 40       	sbci	r19, 0x00	; 0
 348:	3a 87       	std	Y+10, r19	; 0x0a
 34a:	29 87       	std	Y+9, r18	; 0x09
 34c:	c1 01       	movw	r24, r2
 34e:	02 96       	adiw	r24, 0x02	; 2
 350:	98 87       	std	Y+8, r25	; 0x08
 352:	8f 83       	std	Y+7, r24	; 0x07
	//do a test just to be sure
	test();	
				
	while(1) {
		//set all actions to 0
		report.buttons = 0;
 354:	55 24       	eor	r5, r5
 356:	53 94       	inc	r5
 358:	3c 82       	std	Y+4, r3	; 0x04
 35a:	2b 82       	std	Y+3, r2	; 0x03
 35c:	19 01       	movw	r2, r18
		report.x = 0;
		report.y = 0;
		report.wheel = 0;
 35e:	ff 24       	eor	r15, r15
		
		//noise threshold is +/- 2
		//acceleration function is f(x) = (3/2 * abs(x) + 37) / 80 ... yeah, you heard me.  
		
		//gyro X axis
		Xv = read(CHANNEL_X);
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	0e 94 96 00 	call	0x12c	; 0x12c <read>
		report.x = ((Xv < Xv0 - 2) || (Xv > Xv0 + 2))? (Xv0 - Xv) * (3*abs(Xv - Xv0)/2 + 37) / 80 : 0;	
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	a9 81       	ldd	r26, Y+1	; 0x01
 36a:	ba 81       	ldd	r27, Y+2	; 0x02
 36c:	8a 17       	cp	r24, r26
 36e:	9b 07       	cpc	r25, r27
 370:	2c f0       	brlt	.+10     	; 0x37c <main+0xa4>
 372:	ed 81       	ldd	r30, Y+5	; 0x05
 374:	fe 81       	ldd	r31, Y+6	; 0x06
 376:	e8 17       	cp	r30, r24
 378:	f9 07       	cpc	r31, r25
 37a:	0c f5       	brge	.+66     	; 0x3be <main+0xe6>
 37c:	a8 01       	movw	r20, r16
 37e:	48 1b       	sub	r20, r24
 380:	59 0b       	sbc	r21, r25
 382:	80 1b       	sub	r24, r16
 384:	91 0b       	sbc	r25, r17
 386:	1a f4       	brpl	.+6      	; 0x38e <main+0xb6>
 388:	90 95       	com	r25
 38a:	81 95       	neg	r24
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	9c 01       	movw	r18, r24
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	82 0f       	add	r24, r18
 396:	93 1f       	adc	r25, r19
 398:	99 23       	and	r25, r25
 39a:	0c f4       	brge	.+2      	; 0x39e <main+0xc6>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	9c 01       	movw	r18, r24
 3a4:	2b 5d       	subi	r18, 0xDB	; 219
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	42 9f       	mul	r20, r18
 3aa:	c0 01       	movw	r24, r0
 3ac:	43 9f       	mul	r20, r19
 3ae:	90 0d       	add	r25, r0
 3b0:	52 9f       	mul	r21, r18
 3b2:	90 0d       	add	r25, r0
 3b4:	11 24       	eor	r1, r1
 3b6:	b3 01       	movw	r22, r6
 3b8:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <main+0xe8>
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	d6 2e       	mov	r13, r22
		
		//gyro Y axis
		Yv = read(CHANNEL_Y);
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 96 00 	call	0x12c	; 0x12c <read>
		report.y = ((Yv < Yv0 - 2) || (Yv > Yv0 + 2))? (Yv0 - Yv) * (3*abs(Yv0 - Yv)/2 + 37) / 80 : 0;
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	82 15       	cp	r24, r2
 3cc:	93 05       	cpc	r25, r3
 3ce:	2c f0       	brlt	.+10     	; 0x3da <main+0x102>
 3d0:	2f 81       	ldd	r18, Y+7	; 0x07
 3d2:	38 85       	ldd	r19, Y+8	; 0x08
 3d4:	28 17       	cp	r18, r24
 3d6:	39 07       	cpc	r19, r25
 3d8:	14 f5       	brge	.+68     	; 0x41e <main+0x146>
 3da:	4b 81       	ldd	r20, Y+3	; 0x03
 3dc:	5c 81       	ldd	r21, Y+4	; 0x04
 3de:	48 1b       	sub	r20, r24
 3e0:	59 0b       	sbc	r21, r25
 3e2:	ca 01       	movw	r24, r20
 3e4:	22 f4       	brpl	.+8      	; 0x3ee <main+0x116>
 3e6:	88 27       	eor	r24, r24
 3e8:	99 27       	eor	r25, r25
 3ea:	84 1b       	sub	r24, r20
 3ec:	95 0b       	sbc	r25, r21
 3ee:	9c 01       	movw	r18, r24
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	99 23       	and	r25, r25
 3fa:	0c f4       	brge	.+2      	; 0x3fe <main+0x126>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	9c 01       	movw	r18, r24
 404:	2b 5d       	subi	r18, 0xDB	; 219
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	42 9f       	mul	r20, r18
 40a:	c0 01       	movw	r24, r0
 40c:	43 9f       	mul	r20, r19
 40e:	90 0d       	add	r25, r0
 410:	52 9f       	mul	r21, r18
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	b3 01       	movw	r22, r6
 418:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 41c:	01 c0       	rjmp	.+2      	; 0x420 <main+0x148>
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	e6 2e       	mov	r14, r22
		
		//TODO: sensitivity select button
		
		//left click
		buttonLeft = read(CHANNEL_BUTTON_LEFT);
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	0e 94 96 00 	call	0x12c	; 0x12c <read>
	//do a test just to be sure
	test();	
				
	while(1) {
		//set all actions to 0
		report.buttons = 0;
 428:	45 2c       	mov	r4, r5
 42a:	84 36       	cpi	r24, 0x64	; 100
 42c:	08 f0       	brcs	.+2      	; 0x430 <main+0x158>
 42e:	44 24       	eor	r4, r4
		buttonLeft = read(CHANNEL_BUTTON_LEFT);
		if(buttonLeft < threshold)
			report.buttons |= (1<<CLICK_LEFT);
		
		//right click
		buttonRight = read(CHANNEL_BUTTON_RIGHT);
 430:	89 e0       	ldi	r24, 0x09	; 9
 432:	0e 94 96 00 	call	0x12c	; 0x12c <read>
		if(buttonRight < threshold)
 436:	84 36       	cpi	r24, 0x64	; 100
 438:	10 f4       	brcc	.+4      	; 0x43e <main+0x166>
			report.buttons |= (1<<CLICK_RIGHT);
 43a:	32 e0       	ldi	r19, 0x02	; 2
 43c:	43 2a       	or	r4, r19
			nullReport.buttons = 0;
			write(nullReport);
		}
		//if in active mode send the new report
		else {
			write(report);
 43e:	c4 2c       	mov	r12, r4
 440:	c7 01       	movw	r24, r14
 442:	b6 01       	movw	r22, r12
 444:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
			nullReport.buttons = report.buttons;
 448:	84 2c       	mov	r8, r4
			write(nullReport);
 44a:	c5 01       	movw	r24, r10
 44c:	b4 01       	movw	r22, r8
 44e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write>
 452:	85 cf       	rjmp	.-246    	; 0x35e <main+0x86>

00000454 <__divmodhi4>:
 454:	97 fb       	bst	r25, 7
 456:	09 2e       	mov	r0, r25
 458:	07 26       	eor	r0, r23
 45a:	0a d0       	rcall	.+20     	; 0x470 <__divmodhi4_neg1>
 45c:	77 fd       	sbrc	r23, 7
 45e:	04 d0       	rcall	.+8      	; 0x468 <__divmodhi4_neg2>
 460:	0c d0       	rcall	.+24     	; 0x47a <__udivmodhi4>
 462:	06 d0       	rcall	.+12     	; 0x470 <__divmodhi4_neg1>
 464:	00 20       	and	r0, r0
 466:	1a f4       	brpl	.+6      	; 0x46e <__divmodhi4_exit>

00000468 <__divmodhi4_neg2>:
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255

0000046e <__divmodhi4_exit>:
 46e:	08 95       	ret

00000470 <__divmodhi4_neg1>:
 470:	f6 f7       	brtc	.-4      	; 0x46e <__divmodhi4_exit>
 472:	90 95       	com	r25
 474:	81 95       	neg	r24
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__udivmodhi4>:
 47a:	aa 1b       	sub	r26, r26
 47c:	bb 1b       	sub	r27, r27
 47e:	51 e1       	ldi	r21, 0x11	; 17
 480:	07 c0       	rjmp	.+14     	; 0x490 <__udivmodhi4_ep>

00000482 <__udivmodhi4_loop>:
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	a6 17       	cp	r26, r22
 488:	b7 07       	cpc	r27, r23
 48a:	10 f0       	brcs	.+4      	; 0x490 <__udivmodhi4_ep>
 48c:	a6 1b       	sub	r26, r22
 48e:	b7 0b       	sbc	r27, r23

00000490 <__udivmodhi4_ep>:
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	5a 95       	dec	r21
 496:	a9 f7       	brne	.-22     	; 0x482 <__udivmodhi4_loop>
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
