
GloveMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001c14  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000005e5  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000082a  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023f  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000055b  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f4  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000173  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ee  00000000  00000000  00003cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  9e:	0c 94 bd 03 	jmp	0x77a	; 0x77a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUSART>:
} mouseReport;


void initUSART() 
{
    UBRR0 = 103;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25
  ae:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<TXEN0);
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24
}
  c2:	08 95       	ret

000000c4 <initPins>:

void initPins() {
	PORTD |= (7<<PORTD2);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8c 61       	ori	r24, 0x1C	; 28
  c8:	8b b9       	out	0x0b, r24	; 11
}
  ca:	08 95       	ret

000000cc <initADC>:

void initADC() {
	ADCSRA = (1<<ADEN) | (3<<ADPS0);
  cc:	83 e8       	ldi	r24, 0x83	; 131
  ce:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = (1<<REFS0) | (1<<ADLAR);
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	80 93 7c 00 	sts	0x007C, r24
}
  d8:	08 95       	ret

000000da <read>:
inline long map(uint8_t val, float minVal, float maxVal, float min, float max) {
	return (long)(((max - min) / (maxVal - minVal)) * val + ((min * maxVal - max * minVal) / (maxVal - minVal)));
}

uint8_t read(uint8_t channel) {
	if(channel > 5) 
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	30 f5       	brcc	.+76     	; 0x12a <read+0x50>
		return -1;
	
	ADMUX &= 0xE0;
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	90 7e       	andi	r25, 0xE0	; 224
  e6:	90 83       	st	Z, r25
	ADMUX |= channel;
  e8:	90 81       	ld	r25, Z
  ea:	89 2b       	or	r24, r25
  ec:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
	while(! (ADCSRA & (1<<ADIF)));
  f8:	80 81       	ld	r24, Z
  fa:	84 ff       	sbrs	r24, 4
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <read+0x1e>
	return (uint8_t)map(ADCH, 0, 171, 0, 255);
  fe:	60 91 79 00 	lds	r22, 0x0079
	ADCSRA = (1<<ADEN) | (3<<ADPS0);
	ADMUX = (1<<REFS0) | (1<<ADLAR);
}

inline long map(uint8_t val, float minVal, float maxVal, float min, float max) {
	return (long)(((max - min) / (maxVal - minVal)) * val + ((min * maxVal - max * minVal) / (maxVal - minVal)));
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 a7 02 	call	0x54e	; 0x54e <__floatsisf>
 10c:	20 e9       	ldi	r18, 0x90	; 144
 10e:	30 ee       	ldi	r19, 0xE0	; 224
 110:	4e eb       	ldi	r20, 0xBE	; 190
 112:	5f e3       	ldi	r21, 0x3F	; 63
 114:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	a9 01       	movw	r20, r18
 11e:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3>
 122:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fixsfsi>
 126:	86 2f       	mov	r24, r22
	
	ADMUX &= 0xE0;
	ADMUX |= channel;
	ADCSRA |= (1<<ADSC);
	while(! (ADCSRA & (1<<ADIF)));
	return (uint8_t)map(ADCH, 0, 171, 0, 255);
 128:	08 95       	ret
	return (long)(((max - min) / (maxVal - minVal)) * val + ((min * maxVal - max * minVal) / (maxVal - minVal)));
}

uint8_t read(uint8_t channel) {
	if(channel > 5) 
		return -1;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
	ADMUX &= 0xE0;
	ADMUX |= channel;
	ADCSRA |= (1<<ADSC);
	while(! (ADCSRA & (1<<ADIF)));
	return (uint8_t)map(ADCH, 0, 171, 0, 255);
}
 12c:	08 95       	ret

0000012e <mediate>:

uint8_t mediate(uint8_t channel) {
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	f8 2e       	mov	r15, r24
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t sum = 0, i;
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<16; ++i) {
		sum += read(channel);
 142:	8f 2d       	mov	r24, r15
 144:	0e 94 6d 00 	call	0xda	; 0xda <read>
 148:	c8 0f       	add	r28, r24
 14a:	d1 1d       	adc	r29, r1
 14c:	01 50       	subi	r16, 0x01	; 1
 14e:	10 40       	sbci	r17, 0x00	; 0
	return (uint8_t)map(ADCH, 0, 171, 0, 255);
}

uint8_t mediate(uint8_t channel) {
	uint16_t sum = 0, i;
	for(i=0; i<16; ++i) {
 150:	c1 f7       	brne	.-16     	; 0x142 <mediate+0x14>
		sum += read(channel);
	}
	return (uint8_t)(sum>>4);
 152:	ce 01       	movw	r24, r28
 154:	92 95       	swap	r25
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 27       	eor	r24, r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	89 27       	eor	r24, r25
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	08 95       	ret

0000016c <write>:

void write(mouseReport report) {
	while (!(UCSR0A & (1<<UDRE0)));
 16c:	e0 ec       	ldi	r30, 0xC0	; 192
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	20 81       	ld	r18, Z
 172:	25 ff       	sbrs	r18, 5
 174:	fd cf       	rjmp	.-6      	; 0x170 <write+0x4>
	UDR0 = report.buttons;
 176:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UCSR0A & (1<<UDRE0)));
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	20 81       	ld	r18, Z
 180:	25 ff       	sbrs	r18, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <write+0x12>
	UDR0 = report.x;
 184:	70 93 c6 00 	sts	0x00C6, r23
	while (!(UCSR0A & (1<<UDRE0)));
 188:	e0 ec       	ldi	r30, 0xC0	; 192
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	20 81       	ld	r18, Z
 18e:	25 ff       	sbrs	r18, 5
 190:	fd cf       	rjmp	.-6      	; 0x18c <write+0x20>
	UDR0 = report.y;
 192:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UCSR0A & (1<<UDRE0)));
 196:	e0 ec       	ldi	r30, 0xC0	; 192
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	85 ff       	sbrs	r24, 5
 19e:	fd cf       	rjmp	.-6      	; 0x19a <write+0x2e>
	UDR0 = report.wheel;
 1a0:	90 93 c6 00 	sts	0x00C6, r25
}
 1a4:	08 95       	ret

000001a6 <test>:

void test() {
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	int ind;
	mouseReport nullReport = { 0, 0, 0, 0 };
 1ba:	cc 24       	eor	r12, r12
 1bc:	dd 24       	eor	r13, r13
 1be:	76 01       	movw	r14, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	93 ed       	ldi	r25, 0xD3	; 211
 1c4:	a0 e3       	ldi	r26, 0x30	; 48
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	a0 40       	sbci	r26, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <test+0x20>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <test+0x2a>
 1d0:	00 00       	nop
	mouseReport report;	
	_delay_ms(1000);

	report.buttons = 0;
 1d2:	00 e0       	ldi	r16, 0x00	; 0
	report.x = 0;
	report.y = 0;
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
	report.wheel = 0;
 1d6:	10 e0       	ldi	r17, 0x00	; 0

	report.x = -2;
 1d8:	ce ef       	ldi	r28, 0xFE	; 254
 1da:	0f 2e       	mov	r0, r31
 1dc:	f4 e1       	ldi	r31, 0x14	; 20
 1de:	af 2e       	mov	r10, r31
 1e0:	bb 24       	eor	r11, r11
 1e2:	f0 2d       	mov	r31, r0
	for (ind=0; ind<20; ind++) {
		write(report);
 1e4:	60 2f       	mov	r22, r16
 1e6:	7c 2f       	mov	r23, r28
 1e8:	8d 2f       	mov	r24, r29
 1ea:	91 2f       	mov	r25, r17
 1ec:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
		write(nullReport);
 1f0:	c7 01       	movw	r24, r14
 1f2:	b6 01       	movw	r22, r12
 1f4:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
 1f8:	08 94       	sec
 1fa:	a1 08       	sbc	r10, r1
 1fc:	b1 08       	sbc	r11, r1
	report.x = 0;
	report.y = 0;
	report.wheel = 0;

	report.x = -2;
	for (ind=0; ind<20; ind++) {
 1fe:	a1 14       	cp	r10, r1
 200:	b1 04       	cpc	r11, r1
 202:	81 f7       	brne	.-32     	; 0x1e4 <test+0x3e>
		write(report);
		write(nullReport);
	}

	report.x = 0;
 204:	c0 e0       	ldi	r28, 0x00	; 0
	report.y = -2;
 206:	de ef       	ldi	r29, 0xFE	; 254
 208:	0f 2e       	mov	r0, r31
 20a:	f4 e1       	ldi	r31, 0x14	; 20
 20c:	af 2e       	mov	r10, r31
 20e:	bb 24       	eor	r11, r11
 210:	f0 2d       	mov	r31, r0
	for (ind=0; ind<20; ind++) {
		write(report);
 212:	60 2f       	mov	r22, r16
 214:	7c 2f       	mov	r23, r28
 216:	8d 2f       	mov	r24, r29
 218:	91 2f       	mov	r25, r17
 21a:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
		write(nullReport);
 21e:	c7 01       	movw	r24, r14
 220:	b6 01       	movw	r22, r12
 222:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
 226:	08 94       	sec
 228:	a1 08       	sbc	r10, r1
 22a:	b1 08       	sbc	r11, r1
		write(nullReport);
	}

	report.x = 0;
	report.y = -2;
	for (ind=0; ind<20; ind++) {
 22c:	a1 14       	cp	r10, r1
 22e:	b1 04       	cpc	r11, r1
 230:	81 f7       	brne	.-32     	; 0x212 <test+0x6c>
		write(report);
		write(nullReport);
	}

	report.x = 2;
 232:	c2 e0       	ldi	r28, 0x02	; 2
	report.y = 0;
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	0f 2e       	mov	r0, r31
 238:	f4 e1       	ldi	r31, 0x14	; 20
 23a:	af 2e       	mov	r10, r31
 23c:	bb 24       	eor	r11, r11
 23e:	f0 2d       	mov	r31, r0
	for (ind=0; ind<20; ind++) {
		write(report);
 240:	60 2f       	mov	r22, r16
 242:	7c 2f       	mov	r23, r28
 244:	8d 2f       	mov	r24, r29
 246:	91 2f       	mov	r25, r17
 248:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
		write(nullReport);
 24c:	c7 01       	movw	r24, r14
 24e:	b6 01       	movw	r22, r12
 250:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
 254:	08 94       	sec
 256:	a1 08       	sbc	r10, r1
 258:	b1 08       	sbc	r11, r1
		write(nullReport);
	}

	report.x = 2;
	report.y = 0;
	for (ind=0; ind<20; ind++) {
 25a:	a1 14       	cp	r10, r1
 25c:	b1 04       	cpc	r11, r1
 25e:	81 f7       	brne	.-32     	; 0x240 <test+0x9a>
		write(report);
		write(nullReport);
	}

	report.x = 0;
 260:	c0 e0       	ldi	r28, 0x00	; 0
	report.y = 2;
 262:	d2 e0       	ldi	r29, 0x02	; 2
 264:	0f 2e       	mov	r0, r31
 266:	f4 e1       	ldi	r31, 0x14	; 20
 268:	af 2e       	mov	r10, r31
 26a:	bb 24       	eor	r11, r11
 26c:	f0 2d       	mov	r31, r0
	for (ind=0; ind<20; ind++) {
		write(report);
 26e:	60 2f       	mov	r22, r16
 270:	7c 2f       	mov	r23, r28
 272:	8d 2f       	mov	r24, r29
 274:	91 2f       	mov	r25, r17
 276:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
		write(nullReport);
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
 282:	08 94       	sec
 284:	a1 08       	sbc	r10, r1
 286:	b1 08       	sbc	r11, r1
		write(nullReport);
	}

	report.x = 0;
	report.y = 2;
	for (ind=0; ind<20; ind++) {
 288:	a1 14       	cp	r10, r1
 28a:	b1 04       	cpc	r11, r1
 28c:	81 f7       	brne	.-32     	; 0x26e <test+0xc8>
		write(report);
		write(nullReport);
	}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	27 97       	sbiw	r28, 0x07	; 7
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
	mouseReport nullReport = { 0, 0, 0, 0 };
 2b8:	88 24       	eor	r8, r8
 2ba:	99 24       	eor	r9, r9
 2bc:	54 01       	movw	r10, r8
	uint8_t B0, B1;
	//uint8_t Xacc0, Yacc0;
	//uint8_t Xacc = 0, Yacc = 0;
	//int movementX = 0, movementY = 0, countX = 0, countY = 0;
	
	initUSART();
 2be:	0e 94 53 00 	call	0xa6	; 0xa6 <initUSART>
	initADC();
 2c2:	0e 94 66 00 	call	0xcc	; 0xcc <initADC>
	initPins();
 2c6:	0e 94 62 00 	call	0xc4	; 0xc4 <initPins>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	93 ed       	ldi	r25, 0xD3	; 211
 2ce:	a0 e3       	ldi	r26, 0x30	; 48
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	a0 40       	sbci	r26, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x2c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x36>
 2da:	00 00       	nop
	_delay_ms(1000);
	
	//Xacc0 = mediate(XaccPin);
	//Yacc0 = mediate(YaccPin);
	//Xacc = Xacc0; Yacc = Yacc0;
	Xv0 = mediate(XvPin);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 97 00 	call	0x12e	; 0x12e <mediate>
 2e2:	08 2f       	mov	r16, r24
	Yv0 = mediate(YvPin);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 97 00 	call	0x12e	; 0x12e <mediate>
 2ea:	68 2e       	mov	r6, r24
	Xv = Xv0; Yv = Yv0; 
	B0 = mediate(Button0Pin);
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	0e 94 97 00 	call	0x12e	; 0x12e <mediate>
	B1 = mediate(Button1Pin);
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	0e 94 97 00 	call	0x12e	; 0x12e <mediate>
	
	test();
 2f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <test>
		
		//gyro X axis
		//Xv = (Xv*5 + read(XvPin)*3) / 8;
		Xv = read(XvPin);
		//report.x = (Xv - Xv0);
		report.x = ((Xv < Xv0 - 2) || (Xv > Xv0 + 2))? (Xv - Xv0) * (3*abs(Xv - Xv0)/2 + 37) / 80 : 0;
 2fc:	a0 2f       	mov	r26, r16
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	ba 83       	std	Y+2, r27	; 0x02
 302:	a9 83       	std	Y+1, r26	; 0x01
 304:	2d 01       	movw	r4, r26
 306:	ee ef       	ldi	r30, 0xFE	; 254
 308:	ff ef       	ldi	r31, 0xFF	; 255
 30a:	4e 0e       	add	r4, r30
 30c:	5f 1e       	adc	r5, r31
 30e:	00 e5       	ldi	r16, 0x50	; 80
 310:	10 e0       	ldi	r17, 0x00	; 0
 312:	12 96       	adiw	r26, 0x02	; 2
 314:	bc 83       	std	Y+4, r27	; 0x04
 316:	ab 83       	std	Y+3, r26	; 0x03
		
		//gyro Y axis	
		//Yv = (Yv*5 + read(YvPin)*3) /8;	
		Yv = read(YvPin);
		//report.y = (Yv0 - Yv);
		report.y = ((Yv < Yv0 - 2) || (Yv > Yv0 + 2))? (Yv0 - Yv) * (3*abs(Yv0 - Yv)/2 + 37) / 80: 0;
 318:	77 24       	eor	r7, r7
 31a:	0f 2e       	mov	r0, r31
 31c:	fe ef       	ldi	r31, 0xFE	; 254
 31e:	2f 2e       	mov	r2, r31
 320:	ff ef       	ldi	r31, 0xFF	; 255
 322:	3f 2e       	mov	r3, r31
 324:	f0 2d       	mov	r31, r0
 326:	26 0c       	add	r2, r6
 328:	37 1c       	adc	r3, r7
 32a:	93 01       	movw	r18, r6
 32c:	2e 5f       	subi	r18, 0xFE	; 254
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	3e 83       	std	Y+6, r19	; 0x06
 332:	2d 83       	std	Y+5, r18	; 0x05
    while(1)
    {
		report.buttons = 0;
		report.x = 0;
		report.y = 0;
		report.wheel = 0;
 334:	ff 24       	eor	r15, r15
		
		//gyro X axis
		//Xv = (Xv*5 + read(XvPin)*3) / 8;
		Xv = read(XvPin);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 6d 00 	call	0xda	; 0xda <read>
		//report.x = (Xv - Xv0);
		report.x = ((Xv < Xv0 - 2) || (Xv > Xv0 + 2))? (Xv - Xv0) * (3*abs(Xv - Xv0)/2 + 37) / 80 : 0;
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	84 15       	cp	r24, r4
 340:	95 05       	cpc	r25, r5
 342:	2c f0       	brlt	.+10     	; 0x34e <main+0xaa>
 344:	ab 81       	ldd	r26, Y+3	; 0x03
 346:	bc 81       	ldd	r27, Y+4	; 0x04
 348:	a8 17       	cp	r26, r24
 34a:	b9 07       	cpc	r27, r25
 34c:	1c f5       	brge	.+70     	; 0x394 <main+0xf0>
 34e:	ac 01       	movw	r20, r24
 350:	e9 81       	ldd	r30, Y+1	; 0x01
 352:	fa 81       	ldd	r31, Y+2	; 0x02
 354:	4e 1b       	sub	r20, r30
 356:	5f 0b       	sbc	r21, r31
 358:	ca 01       	movw	r24, r20
 35a:	22 f4       	brpl	.+8      	; 0x364 <main+0xc0>
 35c:	88 27       	eor	r24, r24
 35e:	99 27       	eor	r25, r25
 360:	84 1b       	sub	r24, r20
 362:	95 0b       	sbc	r25, r21
 364:	9c 01       	movw	r18, r24
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	99 23       	and	r25, r25
 370:	0c f4       	brge	.+2      	; 0x374 <main+0xd0>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	9c 01       	movw	r18, r24
 37a:	2b 5d       	subi	r18, 0xDB	; 219
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	42 9f       	mul	r20, r18
 380:	c0 01       	movw	r24, r0
 382:	43 9f       	mul	r20, r19
 384:	90 0d       	add	r25, r0
 386:	52 9f       	mul	r21, r18
 388:	90 0d       	add	r25, r0
 38a:	11 24       	eor	r1, r1
 38c:	b8 01       	movw	r22, r16
 38e:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodhi4>
 392:	01 c0       	rjmp	.+2      	; 0x396 <main+0xf2>
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	d6 2e       	mov	r13, r22
		
		//gyro Y axis	
		//Yv = (Yv*5 + read(YvPin)*3) /8;	
		Yv = read(YvPin);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 6d 00 	call	0xda	; 0xda <read>
		//report.y = (Yv0 - Yv);
		report.y = ((Yv < Yv0 - 2) || (Yv > Yv0 + 2))? (Yv0 - Yv) * (3*abs(Yv0 - Yv)/2 + 37) / 80: 0;
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	82 15       	cp	r24, r2
 3a2:	93 05       	cpc	r25, r3
 3a4:	2c f0       	brlt	.+10     	; 0x3b0 <main+0x10c>
 3a6:	2d 81       	ldd	r18, Y+5	; 0x05
 3a8:	3e 81       	ldd	r19, Y+6	; 0x06
 3aa:	28 17       	cp	r18, r24
 3ac:	39 07       	cpc	r19, r25
 3ae:	0c f5       	brge	.+66     	; 0x3f2 <main+0x14e>
 3b0:	a3 01       	movw	r20, r6
 3b2:	48 1b       	sub	r20, r24
 3b4:	59 0b       	sbc	r21, r25
 3b6:	ca 01       	movw	r24, r20
 3b8:	22 f4       	brpl	.+8      	; 0x3c2 <main+0x11e>
 3ba:	88 27       	eor	r24, r24
 3bc:	99 27       	eor	r25, r25
 3be:	84 1b       	sub	r24, r20
 3c0:	95 0b       	sbc	r25, r21
 3c2:	9c 01       	movw	r18, r24
 3c4:	22 0f       	add	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
 3cc:	99 23       	and	r25, r25
 3ce:	0c f4       	brge	.+2      	; 0x3d2 <main+0x12e>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	9c 01       	movw	r18, r24
 3d8:	2b 5d       	subi	r18, 0xDB	; 219
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	42 9f       	mul	r20, r18
 3de:	c0 01       	movw	r24, r0
 3e0:	43 9f       	mul	r20, r19
 3e2:	90 0d       	add	r25, r0
 3e4:	52 9f       	mul	r21, r18
 3e6:	90 0d       	add	r25, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	b8 01       	movw	r22, r16
 3ec:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodhi4>
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <main+0x150>
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	e6 2e       	mov	r14, r22
	
	test();
					
    while(1)
    {
		report.buttons = 0;
 3f6:	31 e0       	ldi	r19, 0x01	; 1
 3f8:	3f 83       	std	Y+7, r19	; 0x07
 3fa:	4a 99       	sbic	0x09, 2	; 9
 3fc:	1f 82       	std	Y+7, r1	; 0x07
		//TODO: get this shit working also
			
		//buttons
		if(!(PIND & (1<<PORTD2)))
			report.buttons |= (1<<BUTTON0);
		if(!(PIND & (1<<PORTD3)))
 3fe:	4b 99       	sbic	0x09, 3	; 9
 400:	03 c0       	rjmp	.+6      	; 0x408 <main+0x164>
			report.buttons |= (1<<BUTTON1);
 402:	8f 81       	ldd	r24, Y+7	; 0x07
 404:	82 60       	ori	r24, 0x02	; 2
 406:	8f 83       	std	Y+7, r24	; 0x07
					
		write(report);
 408:	cf 80       	ldd	r12, Y+7	; 0x07
 40a:	c7 01       	movw	r24, r14
 40c:	b6 01       	movw	r22, r12
 40e:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
		nullReport.buttons = report.buttons;
 412:	8f 80       	ldd	r8, Y+7	; 0x07
		write(nullReport);
 414:	c5 01       	movw	r24, r10
 416:	b4 01       	movw	r22, r8
 418:	0e 94 b6 00 	call	0x16c	; 0x16c <write>
    }
 41c:	8b cf       	rjmp	.-234    	; 0x334 <main+0x90>

0000041e <__subsf3>:
 41e:	50 58       	subi	r21, 0x80	; 128

00000420 <__addsf3>:
 420:	bb 27       	eor	r27, r27
 422:	aa 27       	eor	r26, r26
 424:	0e d0       	rcall	.+28     	; 0x442 <__addsf3x>
 426:	e5 c0       	rjmp	.+458    	; 0x5f2 <__fp_round>
 428:	d6 d0       	rcall	.+428    	; 0x5d6 <__fp_pscA>
 42a:	30 f0       	brcs	.+12     	; 0x438 <__addsf3+0x18>
 42c:	db d0       	rcall	.+438    	; 0x5e4 <__fp_pscB>
 42e:	20 f0       	brcs	.+8      	; 0x438 <__addsf3+0x18>
 430:	31 f4       	brne	.+12     	; 0x43e <__addsf3+0x1e>
 432:	9f 3f       	cpi	r25, 0xFF	; 255
 434:	11 f4       	brne	.+4      	; 0x43a <__addsf3+0x1a>
 436:	1e f4       	brtc	.+6      	; 0x43e <__addsf3+0x1e>
 438:	cb c0       	rjmp	.+406    	; 0x5d0 <__fp_nan>
 43a:	0e f4       	brtc	.+2      	; 0x43e <__addsf3+0x1e>
 43c:	e0 95       	com	r30
 43e:	e7 fb       	bst	r30, 7
 440:	c1 c0       	rjmp	.+386    	; 0x5c4 <__fp_inf>

00000442 <__addsf3x>:
 442:	e9 2f       	mov	r30, r25
 444:	e7 d0       	rcall	.+462    	; 0x614 <__fp_split3>
 446:	80 f3       	brcs	.-32     	; 0x428 <__addsf3+0x8>
 448:	ba 17       	cp	r27, r26
 44a:	62 07       	cpc	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	84 07       	cpc	r24, r20
 450:	95 07       	cpc	r25, r21
 452:	18 f0       	brcs	.+6      	; 0x45a <__addsf3x+0x18>
 454:	71 f4       	brne	.+28     	; 0x472 <__addsf3x+0x30>
 456:	9e f5       	brtc	.+102    	; 0x4be <__addsf3x+0x7c>
 458:	ff c0       	rjmp	.+510    	; 0x658 <__fp_zero>
 45a:	0e f4       	brtc	.+2      	; 0x45e <__addsf3x+0x1c>
 45c:	e0 95       	com	r30
 45e:	0b 2e       	mov	r0, r27
 460:	ba 2f       	mov	r27, r26
 462:	a0 2d       	mov	r26, r0
 464:	0b 01       	movw	r0, r22
 466:	b9 01       	movw	r22, r18
 468:	90 01       	movw	r18, r0
 46a:	0c 01       	movw	r0, r24
 46c:	ca 01       	movw	r24, r20
 46e:	a0 01       	movw	r20, r0
 470:	11 24       	eor	r1, r1
 472:	ff 27       	eor	r31, r31
 474:	59 1b       	sub	r21, r25
 476:	99 f0       	breq	.+38     	; 0x49e <__addsf3x+0x5c>
 478:	59 3f       	cpi	r21, 0xF9	; 249
 47a:	50 f4       	brcc	.+20     	; 0x490 <__addsf3x+0x4e>
 47c:	50 3e       	cpi	r21, 0xE0	; 224
 47e:	68 f1       	brcs	.+90     	; 0x4da <__addsf3x+0x98>
 480:	1a 16       	cp	r1, r26
 482:	f0 40       	sbci	r31, 0x00	; 0
 484:	a2 2f       	mov	r26, r18
 486:	23 2f       	mov	r18, r19
 488:	34 2f       	mov	r19, r20
 48a:	44 27       	eor	r20, r20
 48c:	58 5f       	subi	r21, 0xF8	; 248
 48e:	f3 cf       	rjmp	.-26     	; 0x476 <__addsf3x+0x34>
 490:	46 95       	lsr	r20
 492:	37 95       	ror	r19
 494:	27 95       	ror	r18
 496:	a7 95       	ror	r26
 498:	f0 40       	sbci	r31, 0x00	; 0
 49a:	53 95       	inc	r21
 49c:	c9 f7       	brne	.-14     	; 0x490 <__addsf3x+0x4e>
 49e:	7e f4       	brtc	.+30     	; 0x4be <__addsf3x+0x7c>
 4a0:	1f 16       	cp	r1, r31
 4a2:	ba 0b       	sbc	r27, r26
 4a4:	62 0b       	sbc	r22, r18
 4a6:	73 0b       	sbc	r23, r19
 4a8:	84 0b       	sbc	r24, r20
 4aa:	ba f0       	brmi	.+46     	; 0x4da <__addsf3x+0x98>
 4ac:	91 50       	subi	r25, 0x01	; 1
 4ae:	a1 f0       	breq	.+40     	; 0x4d8 <__addsf3x+0x96>
 4b0:	ff 0f       	add	r31, r31
 4b2:	bb 1f       	adc	r27, r27
 4b4:	66 1f       	adc	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	88 1f       	adc	r24, r24
 4ba:	c2 f7       	brpl	.-16     	; 0x4ac <__addsf3x+0x6a>
 4bc:	0e c0       	rjmp	.+28     	; 0x4da <__addsf3x+0x98>
 4be:	ba 0f       	add	r27, r26
 4c0:	62 1f       	adc	r22, r18
 4c2:	73 1f       	adc	r23, r19
 4c4:	84 1f       	adc	r24, r20
 4c6:	48 f4       	brcc	.+18     	; 0x4da <__addsf3x+0x98>
 4c8:	87 95       	ror	r24
 4ca:	77 95       	ror	r23
 4cc:	67 95       	ror	r22
 4ce:	b7 95       	ror	r27
 4d0:	f7 95       	ror	r31
 4d2:	9e 3f       	cpi	r25, 0xFE	; 254
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__addsf3x+0x96>
 4d6:	b3 cf       	rjmp	.-154    	; 0x43e <__addsf3+0x1e>
 4d8:	93 95       	inc	r25
 4da:	88 0f       	add	r24, r24
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <__addsf3x+0x9e>
 4de:	99 27       	eor	r25, r25
 4e0:	ee 0f       	add	r30, r30
 4e2:	97 95       	ror	r25
 4e4:	87 95       	ror	r24
 4e6:	08 95       	ret

000004e8 <__fixsfsi>:
 4e8:	04 d0       	rcall	.+8      	; 0x4f2 <__fixunssfsi>
 4ea:	68 94       	set
 4ec:	b1 11       	cpse	r27, r1
 4ee:	b5 c0       	rjmp	.+362    	; 0x65a <__fp_szero>
 4f0:	08 95       	ret

000004f2 <__fixunssfsi>:
 4f2:	98 d0       	rcall	.+304    	; 0x624 <__fp_splitA>
 4f4:	88 f0       	brcs	.+34     	; 0x518 <__fixunssfsi+0x26>
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	90 f0       	brcs	.+36     	; 0x51e <__fixunssfsi+0x2c>
 4fa:	b9 2f       	mov	r27, r25
 4fc:	99 27       	eor	r25, r25
 4fe:	b7 51       	subi	r27, 0x17	; 23
 500:	a0 f0       	brcs	.+40     	; 0x52a <__fixunssfsi+0x38>
 502:	d1 f0       	breq	.+52     	; 0x538 <__fixunssfsi+0x46>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	1a f0       	brmi	.+6      	; 0x514 <__fixunssfsi+0x22>
 50e:	ba 95       	dec	r27
 510:	c9 f7       	brne	.-14     	; 0x504 <__fixunssfsi+0x12>
 512:	12 c0       	rjmp	.+36     	; 0x538 <__fixunssfsi+0x46>
 514:	b1 30       	cpi	r27, 0x01	; 1
 516:	81 f0       	breq	.+32     	; 0x538 <__fixunssfsi+0x46>
 518:	9f d0       	rcall	.+318    	; 0x658 <__fp_zero>
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	08 95       	ret
 51e:	9c c0       	rjmp	.+312    	; 0x658 <__fp_zero>
 520:	67 2f       	mov	r22, r23
 522:	78 2f       	mov	r23, r24
 524:	88 27       	eor	r24, r24
 526:	b8 5f       	subi	r27, 0xF8	; 248
 528:	39 f0       	breq	.+14     	; 0x538 <__fixunssfsi+0x46>
 52a:	b9 3f       	cpi	r27, 0xF9	; 249
 52c:	cc f3       	brlt	.-14     	; 0x520 <__fixunssfsi+0x2e>
 52e:	86 95       	lsr	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b3 95       	inc	r27
 536:	d9 f7       	brne	.-10     	; 0x52e <__fixunssfsi+0x3c>
 538:	3e f4       	brtc	.+14     	; 0x548 <__fixunssfsi+0x56>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__floatunsisf>:
 54a:	e8 94       	clt
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__floatsisf+0x12>

0000054e <__floatsisf>:
 54e:	97 fb       	bst	r25, 7
 550:	3e f4       	brtc	.+14     	; 0x560 <__floatsisf+0x12>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	99 23       	and	r25, r25
 562:	a9 f0       	breq	.+42     	; 0x58e <__floatsisf+0x40>
 564:	f9 2f       	mov	r31, r25
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	bb 27       	eor	r27, r27
 56a:	93 95       	inc	r25
 56c:	f6 95       	lsr	r31
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f1 11       	cpse	r31, r1
 578:	f8 cf       	rjmp	.-16     	; 0x56a <__floatsisf+0x1c>
 57a:	fa f4       	brpl	.+62     	; 0x5ba <__floatsisf+0x6c>
 57c:	bb 0f       	add	r27, r27
 57e:	11 f4       	brne	.+4      	; 0x584 <__floatsisf+0x36>
 580:	60 ff       	sbrs	r22, 0
 582:	1b c0       	rjmp	.+54     	; 0x5ba <__floatsisf+0x6c>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <__floatsisf+0x6c>
 58e:	88 23       	and	r24, r24
 590:	11 f0       	breq	.+4      	; 0x596 <__floatsisf+0x48>
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__floatsisf+0x6a>
 596:	77 23       	and	r23, r23
 598:	21 f0       	breq	.+8      	; 0x5a2 <__floatsisf+0x54>
 59a:	9e e8       	ldi	r25, 0x8E	; 142
 59c:	87 2f       	mov	r24, r23
 59e:	76 2f       	mov	r23, r22
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__floatsisf+0x5e>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <__floatsisf+0x74>
 5a6:	96 e8       	ldi	r25, 0x86	; 134
 5a8:	86 2f       	mov	r24, r22
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	2a f0       	brmi	.+10     	; 0x5ba <__floatsisf+0x6c>
 5b0:	9a 95       	dec	r25
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	da f7       	brpl	.-10     	; 0x5b0 <__floatsisf+0x62>
 5ba:	88 0f       	add	r24, r24
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <__fp_inf>:
 5c4:	97 f9       	bld	r25, 7
 5c6:	9f 67       	ori	r25, 0x7F	; 127
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <__fp_nan>:
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	80 ec       	ldi	r24, 0xC0	; 192
 5d4:	08 95       	ret

000005d6 <__fp_pscA>:
 5d6:	00 24       	eor	r0, r0
 5d8:	0a 94       	dec	r0
 5da:	16 16       	cp	r1, r22
 5dc:	17 06       	cpc	r1, r23
 5de:	18 06       	cpc	r1, r24
 5e0:	09 06       	cpc	r0, r25
 5e2:	08 95       	ret

000005e4 <__fp_pscB>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	12 16       	cp	r1, r18
 5ea:	13 06       	cpc	r1, r19
 5ec:	14 06       	cpc	r1, r20
 5ee:	05 06       	cpc	r0, r21
 5f0:	08 95       	ret

000005f2 <__fp_round>:
 5f2:	09 2e       	mov	r0, r25
 5f4:	03 94       	inc	r0
 5f6:	00 0c       	add	r0, r0
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0xc>
 5fa:	88 23       	and	r24, r24
 5fc:	52 f0       	brmi	.+20     	; 0x612 <__fp_round+0x20>
 5fe:	bb 0f       	add	r27, r27
 600:	40 f4       	brcc	.+16     	; 0x612 <__fp_round+0x20>
 602:	bf 2b       	or	r27, r31
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0x18>
 606:	60 ff       	sbrs	r22, 0
 608:	04 c0       	rjmp	.+8      	; 0x612 <__fp_round+0x20>
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__fp_split3>:
 614:	57 fd       	sbrc	r21, 7
 616:	90 58       	subi	r25, 0x80	; 128
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	59 f0       	breq	.+22     	; 0x634 <__fp_splitA+0x10>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	71 f0       	breq	.+28     	; 0x63e <__fp_splitA+0x1a>
 622:	47 95       	ror	r20

00000624 <__fp_splitA>:
 624:	88 0f       	add	r24, r24
 626:	97 fb       	bst	r25, 7
 628:	99 1f       	adc	r25, r25
 62a:	61 f0       	breq	.+24     	; 0x644 <__fp_splitA+0x20>
 62c:	9f 3f       	cpi	r25, 0xFF	; 255
 62e:	79 f0       	breq	.+30     	; 0x64e <__fp_splitA+0x2a>
 630:	87 95       	ror	r24
 632:	08 95       	ret
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	55 1f       	adc	r21, r21
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <__fp_split3+0xe>
 63e:	46 95       	lsr	r20
 640:	f1 df       	rcall	.-30     	; 0x624 <__fp_splitA>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__fp_splitA+0x30>
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	18 06       	cpc	r1, r24
 64a:	99 1f       	adc	r25, r25
 64c:	f1 cf       	rjmp	.-30     	; 0x630 <__fp_splitA+0xc>
 64e:	86 95       	lsr	r24
 650:	71 05       	cpc	r23, r1
 652:	61 05       	cpc	r22, r1
 654:	08 94       	sec
 656:	08 95       	ret

00000658 <__fp_zero>:
 658:	e8 94       	clt

0000065a <__fp_szero>:
 65a:	bb 27       	eor	r27, r27
 65c:	66 27       	eor	r22, r22
 65e:	77 27       	eor	r23, r23
 660:	cb 01       	movw	r24, r22
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__mulsf3>:
 666:	0b d0       	rcall	.+22     	; 0x67e <__mulsf3x>
 668:	c4 cf       	rjmp	.-120    	; 0x5f2 <__fp_round>
 66a:	b5 df       	rcall	.-150    	; 0x5d6 <__fp_pscA>
 66c:	28 f0       	brcs	.+10     	; 0x678 <__mulsf3+0x12>
 66e:	ba df       	rcall	.-140    	; 0x5e4 <__fp_pscB>
 670:	18 f0       	brcs	.+6      	; 0x678 <__mulsf3+0x12>
 672:	95 23       	and	r25, r21
 674:	09 f0       	breq	.+2      	; 0x678 <__mulsf3+0x12>
 676:	a6 cf       	rjmp	.-180    	; 0x5c4 <__fp_inf>
 678:	ab cf       	rjmp	.-170    	; 0x5d0 <__fp_nan>
 67a:	11 24       	eor	r1, r1
 67c:	ee cf       	rjmp	.-36     	; 0x65a <__fp_szero>

0000067e <__mulsf3x>:
 67e:	ca df       	rcall	.-108    	; 0x614 <__fp_split3>
 680:	a0 f3       	brcs	.-24     	; 0x66a <__mulsf3+0x4>

00000682 <__mulsf3_pse>:
 682:	95 9f       	mul	r25, r21
 684:	d1 f3       	breq	.-12     	; 0x67a <__mulsf3+0x14>
 686:	95 0f       	add	r25, r21
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	55 1f       	adc	r21, r21
 68c:	62 9f       	mul	r22, r18
 68e:	f0 01       	movw	r30, r0
 690:	72 9f       	mul	r23, r18
 692:	bb 27       	eor	r27, r27
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	63 9f       	mul	r22, r19
 69a:	aa 27       	eor	r26, r26
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	aa 1f       	adc	r26, r26
 6a2:	64 9f       	mul	r22, r20
 6a4:	66 27       	eor	r22, r22
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	66 1f       	adc	r22, r22
 6ac:	82 9f       	mul	r24, r18
 6ae:	22 27       	eor	r18, r18
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 9f       	mul	r23, r19
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	83 9f       	mul	r24, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	22 1f       	adc	r18, r18
 6c6:	74 9f       	mul	r23, r20
 6c8:	33 27       	eor	r19, r19
 6ca:	a0 0d       	add	r26, r0
 6cc:	61 1d       	adc	r22, r1
 6ce:	23 1f       	adc	r18, r19
 6d0:	84 9f       	mul	r24, r20
 6d2:	60 0d       	add	r22, r0
 6d4:	21 1d       	adc	r18, r1
 6d6:	82 2f       	mov	r24, r18
 6d8:	76 2f       	mov	r23, r22
 6da:	6a 2f       	mov	r22, r26
 6dc:	11 24       	eor	r1, r1
 6de:	9f 57       	subi	r25, 0x7F	; 127
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	8a f0       	brmi	.+34     	; 0x706 <__mulsf3_pse+0x84>
 6e4:	e1 f0       	breq	.+56     	; 0x71e <__mulsf3_pse+0x9c>
 6e6:	88 23       	and	r24, r24
 6e8:	4a f0       	brmi	.+18     	; 0x6fc <__mulsf3_pse+0x7a>
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__mulsf3_pse+0x64>
 6fc:	9e 3f       	cpi	r25, 0xFE	; 254
 6fe:	51 05       	cpc	r21, r1
 700:	70 f0       	brcs	.+28     	; 0x71e <__mulsf3_pse+0x9c>
 702:	60 cf       	rjmp	.-320    	; 0x5c4 <__fp_inf>
 704:	aa cf       	rjmp	.-172    	; 0x65a <__fp_szero>
 706:	5f 3f       	cpi	r21, 0xFF	; 255
 708:	ec f3       	brlt	.-6      	; 0x704 <__mulsf3_pse+0x82>
 70a:	98 3e       	cpi	r25, 0xE8	; 232
 70c:	dc f3       	brlt	.-10     	; 0x704 <__mulsf3_pse+0x82>
 70e:	86 95       	lsr	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f7 95       	ror	r31
 718:	e7 95       	ror	r30
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c1 f7       	brne	.-16     	; 0x70e <__mulsf3_pse+0x8c>
 71e:	fe 2b       	or	r31, r30
 720:	88 0f       	add	r24, r24
 722:	91 1d       	adc	r25, r1
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <__divmodhi4>:
 72c:	97 fb       	bst	r25, 7
 72e:	09 2e       	mov	r0, r25
 730:	07 26       	eor	r0, r23
 732:	0a d0       	rcall	.+20     	; 0x748 <__divmodhi4_neg1>
 734:	77 fd       	sbrc	r23, 7
 736:	04 d0       	rcall	.+8      	; 0x740 <__divmodhi4_neg2>
 738:	0c d0       	rcall	.+24     	; 0x752 <__udivmodhi4>
 73a:	06 d0       	rcall	.+12     	; 0x748 <__divmodhi4_neg1>
 73c:	00 20       	and	r0, r0
 73e:	1a f4       	brpl	.+6      	; 0x746 <__divmodhi4_exit>

00000740 <__divmodhi4_neg2>:
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255

00000746 <__divmodhi4_exit>:
 746:	08 95       	ret

00000748 <__divmodhi4_neg1>:
 748:	f6 f7       	brtc	.-4      	; 0x746 <__divmodhi4_exit>
 74a:	90 95       	com	r25
 74c:	81 95       	neg	r24
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__udivmodhi4>:
 752:	aa 1b       	sub	r26, r26
 754:	bb 1b       	sub	r27, r27
 756:	51 e1       	ldi	r21, 0x11	; 17
 758:	07 c0       	rjmp	.+14     	; 0x768 <__udivmodhi4_ep>

0000075a <__udivmodhi4_loop>:
 75a:	aa 1f       	adc	r26, r26
 75c:	bb 1f       	adc	r27, r27
 75e:	a6 17       	cp	r26, r22
 760:	b7 07       	cpc	r27, r23
 762:	10 f0       	brcs	.+4      	; 0x768 <__udivmodhi4_ep>
 764:	a6 1b       	sub	r26, r22
 766:	b7 0b       	sbc	r27, r23

00000768 <__udivmodhi4_ep>:
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	5a 95       	dec	r21
 76e:	a9 f7       	brne	.-22     	; 0x75a <__udivmodhi4_loop>
 770:	80 95       	com	r24
 772:	90 95       	com	r25
 774:	bc 01       	movw	r22, r24
 776:	cd 01       	movw	r24, r26
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
